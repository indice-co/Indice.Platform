using Indice.AspNetCore.EmbeddedUI;

namespace Indice.Features.Cases.UI;

/// <summary>Options for configuring <see cref="SpaUIMiddleware{TOptions}"/> middleware.</summary>
public class CasesUIOptions : SpaUIOptions
{
    /// <summary>The case management api url.</summary>
    public string? ApiUrl { get; set; }

    /// <summary> The html application language.</summary>
    public string? Lang { get; set; }

    /// <summary>The absolute url to the i18n assets folder.</summary>
    /// <remarks>This folder contains translation files eg: el.json, en.json etc.</remarks>
    public string? I18nAssets { get; set; }

    /// <summary>A list containing the tags of the canvases that should be displayed in the dashboard.</summary>
    /// <remarks>If left null or empty all canvases are displayed.</remarks>
    public List<string>? DashboardTags { get; set; }

    /// <summary>A list containing the property names that should be filterable in the cases table.</summary>
    public HashSet<CaseListFilter>? CaseListFilters { get; set; }

    /// <summary>A list containing the property names that should be displayed in the cases table.</summary>
    public HashSet<CaseListColumn>? CaseListColumns { get; set; }

    /// <summary>Creates a new instance <see cref="CasesUIOptions"/>.</summary>
    public CasesUIOptions() {
        ConfigureIndexParameters = args => {
            args[$"%({nameof(ApiUrl)})"] = ApiUrl;
            args[$"%({nameof(Lang)})"] = Lang;
            args[$"%({nameof(I18nAssets)})"] = I18nAssets;
            args[$"%({nameof(DashboardTags)})"] = DashboardTags?.Count > 0 ? string.Join(',', DashboardTags) : null;
            args[$"%({nameof(CaseListColumns)})"] = CaseListColumns?.Count > 0 ? string.Join(',', CaseListColumns) : null;
            args[$"%({nameof(CaseListFilters)})"] = CaseListFilters?.Count > 0 ? string.Join(',', CaseListFilters) : null;
        };
    }
}

/// <summary>
/// An enumeration of all the filters the cases list can be filtered with.
/// </summary>
public enum CaseListFilter
{
    /// <summary>
    /// Filter using the cases unique reference number generated by the
    /// ReferenceNumberSequnece if the feature is enabled.
    /// </summary>
    ReferenceNumber,

    /// <summary>Filter customers using their id</summary>
    CustomerId,

    /// <summary>Filter on the customer's full name.</summary>
    CustomerName,

    /// <summary>Filter based on the customer Tax Id found in metadata `TaxId`</summary>
    TaxId,

    /// <summary>Filter cases based on the group they were pubhslied for.</summary>
    GroupIds,

    /// <summary>Filter cases within a window of dates.</summary>
    DateRange,

    /// <summary>Filter using the case type codes.</summary>
    CaseTypeCodes,

    /// <summary>Filter using checkpoint type codes.</summary>
    CheckpointTypeCodes
}

/// <summary>
/// An enumeration of all the columns the cases list can display.
/// </summary>
public enum CaseListColumn
{
    /// <summary>
    /// The cases unique reference number generated by the
    /// ReferenceNumberSequnece if the feature is enabled.
    /// </summary>
    ReferenceNumber,

    /// <summary>The customer's id</summary>
    CustomerId,

    /// <summary>The customer's full name.</summary>
    CustomerName,

    /// <summary>The customer's Tax Id found in metadata `TaxId`</summary>
    TaxId,

    /// <summary>The group this case was pubhslied for.</summary>
    GroupId,

    /// <summary>The case type.</summary>
    CaseType,

    /// <summary>The current checkpoint type.</summary>
    CheckpointType,

    /// <summary>The user it is assigned to if any.</summary>
    AssignedTo,

    /// <summary>The date this case was submitted.</summary>
    SubmitDate
}
