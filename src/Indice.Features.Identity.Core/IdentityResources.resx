<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DeviceAlreadyTrusted" xml:space="preserve">
    <value>Device is already trusted.</value>
  </data>
  <data name="DevicePendingTrustActivation" xml:space="preserve">
    <value>Device is pending trust activation.</value>
  </data>
  <data name="DeviceRegistrationOtpCode" xml:space="preserve">
    <value>Registration OTP code for device {0} is {1}.</value>
  </data>
  <data name="EmailAlreadyConfirmed" xml:space="preserve">
    <value>User's email is already confirmed.</value>
  </data>
  <data name="EmailUpdateMessageBody" xml:space="preserve">
    <value>Email verification code is {0}.</value>
  </data>
  <data name="EmailUpdateMessageSubject" xml:space="preserve">
    <value>Confirm your account.</value>
  </data>
  <data name="ForgotPasswordMessageBody" xml:space="preserve">
    <value>Follow this link to verify your email is &gt;a href="{0}" &lt;{1}&gt;a&lt;</value>
  </data>
  <data name="ForgotPasswordMessageSubject" xml:space="preserve">
    <value>Forgot password</value>
  </data>
  <data name="ImpossibleTravelOtpMessage" xml:space="preserve">
    <value>Suspicious login attempt OTP code is {0}.</value>
  </data>
  <data name="ImpossibleTravelOtpSubject" xml:space="preserve">
    <value>Suspicious login attempt from a new location.</value>
  </data>
  <data name="InsufficientNumberOfDevices" xml:space="preserve">
    <value>User must have at least 1 device.</value>
  </data>
  <data name="InvalidPhoneNumber" xml:space="preserve">
    <value>Phone number is not valid '{0}'.</value>
  </data>
  <data name="LargeNumberOfDevices" xml:space="preserve">
    <value>Cannot set max number of devices to {0}. Maximum value can be {1}.</value>
  </data>
  <data name="LargeNumberOfUserDevices" xml:space="preserve">
    <value>User already has {0} devices. Cannot set max number to {1}.</value>
  </data>
  <data name="MaxNumberOfDevices" xml:space="preserve">
    <value>You have reached the maximum number of registered devices.</value>
  </data>
  <data name="OtpSecuredValidatorOtpBody" xml:space="preserve">
    <value>Your verification code is '{0}'.</value>
  </data>
  <data name="OtpSecuredValidatorOtpSubject" xml:space="preserve">
    <value>OTP Verification</value>
  </data>
  <data name="PasswordContainsNotAllowedChars" xml:space="preserve">
    <value>Your password contains not allowed characters.</value>
  </data>
  <data name="PasswordContainsNotAllowedCharsRequirement" xml:space="preserve">
    <value>Not allowed characters.</value>
  </data>
  <data name="PasswordHasNonLatinChars" xml:space="preserve">
    <value>Password cannot contain non-Latin characters.</value>
  </data>
  <data name="PasswordHasNonLatinCharsRequirement" xml:space="preserve">
    <value>Does not contain non-Latin characters.</value>
  </data>
  <data name="PasswordIdenticalToUserName" xml:space="preserve">
    <value>Your password looks a lot like your username which can lead to your account been hacked.</value>
  </data>
  <data name="PasswordIdenticalToUserNameRequirement" xml:space="preserve">
    <value>Does not contain part of your username.</value>
  </data>
  <data name="PasswordIsCommon" xml:space="preserve">
    <value>Password is very easy to guess, please choose a more complex one.</value>
  </data>
  <data name="PasswordIsCommonRequirement" xml:space="preserve">
    <value>Not easy to guess.</value>
  </data>
  <data name="PasswordRecentlyUsed" xml:space="preserve">
    <value>This password has been used recently. It is a good practice not to re-use your previous password.</value>
  </data>
  <data name="PasswordRecentlyUsedRequirement" xml:space="preserve">
    <value>Not recently used.</value>
  </data>
  <data name="PasswordRequiresDigitRequirement" xml:space="preserve">
    <value>A numeric character.</value>
  </data>
  <data name="PasswordRequiresLowerRequirement" xml:space="preserve">
    <value>A lower case letter.</value>
  </data>
  <data name="PasswordRequiresNonAlphanumericRequirement" xml:space="preserve">
    <value>A non-alphanumeric character.</value>
  </data>
  <data name="PasswordRequiresUniqueCharsRequirement" xml:space="preserve">
    <value>{0} unique chars required.</value>
  </data>
  <data name="PasswordRequiresUpperRequirement" xml:space="preserve">
    <value>An upper case letter.</value>
  </data>
  <data name="PasswordTooShortRequirement" xml:space="preserve">
    <value>At least {0} characters long.</value>
  </data>
  <data name="PhoneNumberAlreadyConfirmed" xml:space="preserve">
    <value>User's phone number is already confirmed.</value>
  </data>
  <data name="PhoneNumberVerificationMessage" xml:space="preserve">
    <value>SMS verification code is {0}.</value>
  </data>
  <data name="RequiresOtpMessage" xml:space="preserve">
    <value>OTP code is {0}.</value>
  </data>
  <data name="TrustedDeviceRequiresOtpMessage" xml:space="preserve">
    <value>OTP code is {0}.</value>
  </data>
  <data name="TrustedDevicesLimitReached" xml:space="preserve">
    <value>You have reached the maximum number of trusted devices.</value>
  </data>
  <data name="UserAlreadyHasEmail" xml:space="preserve">
    <value>User already has email '{0}'.</value>
  </data>
  <data name="UserAlreadyHasPhoneNumber" xml:space="preserve">
    <value>User already has phone number '{0}'.</value>
  </data>
</root>